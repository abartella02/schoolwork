// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/02/2023 15:54:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          four_one_multi
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module four_one_multi_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg sel0;
reg sel1;
// wires                                               
wire out;

// assign statements (if any)                          
four_one_multi i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.out(out),
	.sel0(sel0),
	.sel1(sel1)
);
initial 
begin 
#1000000 $finish;
end 

// a
always
begin
	a = 1'b0;
	a = #25000 1'b1;
	#25000;
end 

// b
always
begin
	b = 1'b0;
	b = #50000 1'b1;
	#50000;
end 

// c
always
begin
	c = 1'b0;
	c = #100000 1'b1;
	#100000;
end 

// d
initial
begin
	repeat(2)
	begin
		d = 1'b0;
		d = #200000 1'b1;
		# 200000;
	end
	d = 1'b0;
end 

// sel0
always
begin
	sel0 = 1'b0;
	sel0 = #25000 1'b1;
	#25000;
end 

// sel1
always
begin
	sel1 = 1'b0;
	sel1 = #50000 1'b1;
	#50000;
end 
endmodule

